## This projects is to display my financial data science skills to Advent Internationa
##02-16-2023 Apple stock price = 153.71
##COde predicts by 02-19-2023 close its will be up 3% where apple stock = 158.3213 

!pip install yfinance

import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.linear_model import Ridge
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn



# Download stock data and engineer features
def get_stock_data(symbol, start_date, end_date):
    stock = yf.Ticker(symbol)
    df = stock.history(start=start_date, end=end_date)
    df['pct_change'] = df['Close'].pct_change()
    df['sma_50'] = df['Close'].rolling(window=50).mean()
    df['sma_200'] = df['Close'].rolling(window=200).mean()
    
    df.dropna(inplace=True)
    
    return df

# Split data into training and testing sets
def split_data(df):
    X = df.drop(['pct_change'], axis=1)
    y = df['pct_change']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_test



# Train linear regression model with L2 regularization
def train_linear_model(X_train, y_train):
    model = Ridge(alpha=0.1)
    model.fit(X_train, y_train)
    return model



# Train random forest model with hyperparameter tuning
def train_random_forest(X_train, y_train):
    param_grid = {
        'n_estimators': [100, 200, 500],
        'max_depth': [5, 10, 20],
        'min_samples_split': [2, 5, 10],
        'min_samples_leaf': [1, 2, 4]
    }
    rf = RandomForestRegressor(random_state=42)
    grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)
    grid_search.fit(X_train, y_train)
    return grid_search.best_estimator_



# Make predictions and evaluate model performance
def predict_and_evaluate(model, X_test, y_test):
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    return mse, r2


def predict_future_prices(model, df, days):
    last_date = df.index[-1]
    future_dates = pd.date_range(last_date, periods=days + 1)[1:]
    future_prices = []
    for i in range(days):
        last_50 = df['Close'][-50:].values.reshape(1, -1)
        last_200 = df['Close'][-200:].values.reshape(1, -1)
        sma_50 = np.mean(last_50)
        sma_200 = np.mean(last_200)
        last_50_volume = df['Volume'][-50:].values.reshape(1, -1)
        last_200_volume = df['Volume'][-200:].values.reshape(1, -1)
        sma_50_volume = np.mean(last_50_volume)
        sma_200_volume = np.mean(last_200_volume)
        features = np.array([df['Open'][-1], df['High'][-1], df['Low'][-1], df['Close'][-1], df['Volume'][-1], sma_50, sma_200, sma_50_volume, sma_200_volume]).reshape(1, -1)
        prediction = model.predict(features)[0]
        future_price = df['Close'][-1] * (1 + prediction)
        future_prices.append(future_price)
        df = df.append(pd.DataFrame({
            'Open': future_price,
            'High': future_price,
            'Low': future_price,
            'Close': future_price,
            'Volume': 0
        }, index=[future_dates[i]]))
    future_df = pd.DataFrame({'Date': future_dates, 'Close': future_prices})
    future_df.set_index('Date', inplace=True)
    return future_df


print(df)

# Example usage
start_date = '2015-01-01'
end_date = '2023-02-15'   # Updated end date
symbol = 'AAPL'

df = get_stock_data(symbol, start_date, end_date)
X_train, X_test, y_train, y_test = split_data(df)
linear_model = train_linear_model(X_train, y_train)
rf_model = train_random_forest(X_train, y_train)

# Visualize the results
fig, axs = plt.subplots(2, 2, figsize=(10, 10))

# Plot the actual and predicted percentage change for the test set
axs[0, 0].plot(y_test.index, y_test.values, label='Actual')
axs[0, 0].plot(y_test.index, linear_model.predict(X_test), label='Predicted')
axs[0, 0].set_title('Actual vs. Predicted Percentage Change')
axs[0, 0].legend()

# Plot the actual and predicted closing prices for the test set
axs[0, 1].plot(y_test.index, X_test['Close'].values, label='Actual')
axs[0, 1].plot(y_test.index, X_test['Close'].values * (1 + linear_model.predict(X_test)), label='Predicted')
axs[0, 1].set_title('Actual vs. Predicted Closing Prices')
axs[0, 1].legend()

# Plot the feature importance for the random forest model
feature_importances = pd.Series(rf_model.feature_importances_, index=X_train.columns)
feature_importances.plot.bar(ax=axs[1, 0])
axs[1, 0].set_title('Feature Importance')

# Plot the actual and predicted closing prices for the test set
#axs[0, 1].plot(y_test.index, df.loc[y_test.index, 'Close'].values, label='Actual')
#axs[0, 1].plot(y_test.index, linear_model.predict(X_test), label='Predicted')
#axs[0, 1].set_title('Actual vs. Predicted Closing Prices')
#axs[0, 1].legend()

# Plot feature importances for the random forest model
#importances = pd.Series(rf_model.feature_importances_, index=X_train.columns)
#importances.sort_values().plot(kind='barh', ax=axs[1, 0])
#axs[1, 0].set_title('Feature Importances')




# Plot the stock price over time with the 50-day and 200-day moving averages
df[['Close', 'sma_50', 'sma_200']].plot(ax=axs[1, 1])
axs[1, 1].set_title('Closing Price with Moving Averages')

plt.tight_layout()
plt.show()


print(df)


#df['Adj Close'] = (df['High'] + df['Low'] + df['Open'] + df['Close']) / 4
#df.dropna(inplace=True) # remove NaN values
#df = df.replace([np.inf, -np.inf], np.nan).dropna() # remove infinity values
#print(df)


# Predict stock prices for the next 30 days
future_df = predict_future_prices(linear_model, df, 5)

# Plot the actual and predicted closing prices for the test set and the next 30 days
#axs[1, 1].plot(df.index, df['Close'], label='Historical')
#axs[1, 1].plot(future_df.index, future_df['Close'], label='Predicted')
#axs[1, 1].set_title('Predicted Closing Prices for Next 5 Days')
#axs[1, 1].legend()
#plt.title('Actual vs. Predicted Closing Prices for Test Set and Next 30 Days')
#plt.show()

# Plot the actual and predicted percentage change for the test set and the next 30 days

plt.plot(y_test.index, y_test, label='Actual')
plt.plot(y_test.index, linear_model.predict(X_test), label='Predicted')
plt.plot(future_df.index[1:], future_df['Close'].pct_change()[1:], label='Next 5 Days')
plt.legend()
plt.title('Actual vs. Predicted Percentage Change for Test Set and Next 5 Days')
plt.show()
#plt.figure(figsize=(10, 5))
#plt.plot(y_test.index, y_test, label='Actual')
#plt.plot(y_test.index, linear_model.predict(X_test), label='Predicted')
#plt.plot(future_df.index[1:], future_df['Close'].pct_change(), label='Next 30 Days')
#plt.legend()
#plt.title('Actual vs. Predicted Percentage Change for Test Set and Next 30 Days')
#plt.plot(y_test.index, y_test, label='Actual')
#plt.plot(y_test.index, linear_model.predict(X_test), label='Predicted')
#plt.plot(future_df.index, np.concatenate(([y_test[-1]], future_df['Close'].pct_change())), label='Next 30 Days')
#plt.legend()
#plt.title('Actual vs. Predicted Percentage Change for Test Set and Next 30 Days')
plt.show()
# Plot the actual and predicted values for the test set and the next 30 days
